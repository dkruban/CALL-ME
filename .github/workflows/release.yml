name: "release"

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version"
        required: true
        default: ""
      create_release:
        description: "Create release"
        required: true
        default: "true"
      upload_artifacts:
        description: "Upload artifacts"
        required: true
        default: "true"

env:
  BIN_NAME: callme-egui

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_version: ${{ env.RELEASE_VERSION }}
    steps:
      - name: Get the release version from the tag (push)
        shell: bash
        if: env.RELEASE_VERSION == '' && github.event_name == 'push'
        run: |
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RELEASE_VERSION }}"
      - name: Get the release version from the tag (dispatch)
        shell: bash
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "RELEASE_VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV
          echo "version is: ${{ env.RELEASE_VERSION }}"
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Create GitHub release
        id: release
        if: github.event.inputs.create_release == 'true' || github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}

  build-release:
    name: build-release
    needs: create-release
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        name:
          [
            ubuntu-latest,
            ubuntu-arm-latest,
            macOS-arm-latest,
            macOS-latest,
            windows-latest,
          ]
        rust: [stable]
        include:
          - name: ubuntu-arm-latest
            os: ubuntu-latest
            target: linux-aarch64
            cargo_targets: "aarch64-unknown-linux-gnu"
            runner: ubuntu-22.04-arm
          - name: ubuntu-latest
            os: ubuntu-latest
            target: linux-x86_64
            cargo_targets: "x86_64-unknown-linux-gnu"
            runner: ubuntu-20.04
          - name: macOS-latest
            os: macOS-latest
            target: mac-x86_64
            cargo_targets: "x86_64-apple-darwin"
            runner: macos-13
          - name: macOS-arm-latest
            os: macOS-latest
            target: mac-aarch64
            cargo_targets: "aarch64-apple-darwin"
            runner: macos-latest
          - name: windows-latest
            os: windows-latest
            target: windows-x86_64
            cargo_targets: "x86_64-pc-windows-msvc"
            runner: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.cargo_targets }}

      - name: Install dependencies (linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libasound2-dev libdbus-1-dev musl-tools -y

      - name: Set up Homebrew (macOS)
        if: matrix.os == 'macOS-latest'
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install dependencies (macOS)
        if: matrix.os == 'macOS-latest'
        run: brew install automake libtool

      - name: Build release binary
        shell: bash
        run: |
          if [ "${{ matrix.name }}" = "ubuntu-arm-latest" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc
            export CC=aarch64-linux-gnu-gcc
          fi
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cargo build -p callme-egui --no-default-features --verbose --release --target ${{ matrix.cargo_targets }}
          else
            cargo build -p callme-egui --verbose --release --target ${{ matrix.cargo_targets }}
          fi

      - name: Build archive
        shell: bash
        run: |
          staging="${{ env.BIN_NAME }}-${{ needs.create-release.outputs.release_version }}-${{ matrix.target }}"
          mkdir -p "$staging"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.cargo_targets }}/release/${{ env.BIN_NAME }}.exe" "$staging/"
            cd "$staging"
            7z a "../$staging.zip" .
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.cargo_targets }}/release/${{ env.BIN_NAME }}" "$staging/"
            tar czf "$staging.tar.gz" -C "$staging" .
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi
      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.2
        if: github.event.inputs.upload_artifacts == 'true' || github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

  build-android:
    name: build-android
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "17"
      - uses: android-actions/setup-android@v3
        with:
          packages: "platforms;android-30"
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r28

      - uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-apk

      - name: Build apk
        run: |
          keytool -genkey -v -keystore /tmp/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "C=US, O=Android, CN=Android Debug"
          cargo apk build -p callme-egui --target aarch64-linux-android --lib --release
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
          TOOLCHAIN: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64
          CARGO_APK_RELEASE_KEYSTORE_PASSWORD: android
          CARGO_APK_RELEASE_KEYSTORE: /tmp/debug.keystore

      - name: Rename apk
        shell: bash
        run: |
          filename="${{ env.BIN_NAME }}-${{ needs.create-release.outputs.release_version }}-android-aarch64.apk"
          mv target/release/apk/callme-egui.apk "$filename"
          echo "ASSET=$filename" >> $GITHUB_ENV

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.2
        if: github.event.inputs.upload_artifacts == 'true' || github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
